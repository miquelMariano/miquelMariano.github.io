---
title: ¬øComo se usan los roles y playbooks en Ansible?
date: '2017-03-17 00:14:00'
author: miquelMariano
tags: [ansible,devops,automation]
categories: [prueba1]
published: true
comments: true
permalink: /rpa/
layout: post
---


Queridos lectores del blog, como lo prometido es deuda, aqu√≠ ten√©is la continuaci√≥n de mi √∫ltimo post, [Ansible for dummies](https://miquelmariano.github.io/2017/01/ansible-for-dummies/).

En esta ocasi√≥n, vamos a profundizar un poco m√°s en la utilizaci√≥n de playbooks y roles para ser mas √°giles en el control de la configuraci√≥n de nuestra granja de servidores.

Como muchos ya sabr√©is, Ansible se puede utilizar en modo Ad-Hoc o mediante playbook. El modo ad-hoc nos permite ejecutar directamente comandos en una sola l√≠nea sobre nuestros hosts utilizando los m√≥dulos que ya tiene Ansible. Este modo se utiliza cuando queremos efectuar una acci√≥n simple sobre nuestros hosts, como es hacer un reinicio, verificar la conectividad con nuestro servidor de Ansible o simplemente realizar un ping a los miembros de un inventario.

![ansible-ping]({{ site.imagesposts2017 }}/03/ansible-ping.png)

Otra cosa es querer manejar las configuraciones o realizar despliegues sobre nuestra granja. En este caso, los playbooks son mucho mas atractivos üòâ

Los playbooks estan escritos en formato YAML y pueden estar en un solo fichero o siguiendo un modelo estructurado. Cada playbook puede contener uno o m√°s ‚Äúplays‚Äù, que son los que nos van a ayudar a manejar/configurar nuestros diferentes hosts.

![automate-all-things]({{ site.imagesposts2017 }}/03/automate_all_the_things.jpeg)

Aqu√≠ un ejemplo de playbook con una estructura simple en un mismo fichero.

``` yaml
--- 
- hosts: webservers 
  vars: 
     http_port: 80 
     max_clients: 200 
     remote_user: root 
  tasks: 
    - name: ensure apache is at the latest version 
      yum: pkg=httpd 
      state=latest 
    - name: write the apache config file 
      template: 
        src=/srv/httpd.j2 
        dest=/etc/httpd.conf 
        notify: 
          - restart apache 
    - name: ensure apache is running service: 
      name=httpd state=started
```

En el ejemplo de arriba hemos creado toda la configuraci√≥n en un mismo fichero. Esto esta bien si escribimos el playbook para un √∫nico despliegue o la configuraci√≥n es simple. Sin embargo, para escenarios mas complejos es mejor utilizar roles, donde podremos moldear m√°s a nuestro gusto las configuraciones.

Ejemplo de playbook llamando a un role:


``` yaml
---

- hosts: all 
  sudo: yes 
  roles: 
    - { role: apache }
```

# *Roles*

A medida que vamos a√±adiendo funcionalidad y complejidad a nuestros playbooks, cada vez se hace m√°s dif√≠cil manejarlo con un solo fichero. Los roles, nos permiten crear un playbook con una m√≠nima configuraci√≥n y definir toda la complejidad y l√≥gica de las acciones a m√°s bajo nivel.

Seg√∫n la propia documentaci√≥n de Ansible: ‚ÄúRoles in Ansible build on the idea of include files and combine them to form clean, reusable abstractions ‚Äì they allow you to focus more on the big picture and only dive down into the details when needed.‚Äù

Para la correcta utilizaci√≥n de los roles, es necesario crear toda una estructura de carpetas y subcarpetas donde iremos depositando nuestra configuraci√≥n. Tenemos dos opciones para crear estas carpetas, de forma manual o utilizando ansible-galaxy. [Ansible-galaxy](https://galaxy.ansible.com/) es un sitio para la b√∫squeda, la reutilizaci√≥n y el intercambio de roles desarrollados por la comunidad.

Para crear un role mediante ansible-galaxy, ejecutamos el siguiente comando dentro de /etc/ansible/roles:

```
ansible-galaxy init webservers
```

Una vez creado el role, tendremos la siguiente estructura. Para entender bien los roles es importante entender dicha estructura:

![ansible-role-structure]({{ site.imagesposts2017 }}/03/ansible-role-structure.png)

+ Defaults:Este directorio debe contener un fichero llamado main.yml que contendr√° informaci√≥n de las variables globales utilizadas por este role; como el directorio de instalaci√≥n de apache o el puerto de escucha por defecto, entre otros.




